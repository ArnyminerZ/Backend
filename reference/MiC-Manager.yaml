openapi: 3.0.0
x-stoplight:
  id: 9dctvl5eer2w8
info:
  title: MiC Manager
  version: 1.0.0-indev02
  description: A backend server for managing communities.
  contact:
    name: Arnau Mora
    email: mic.manager@arnaumora.me
  license:
    name: GNU AGPL v3
    url: 'https://github.com/ArnyminerZ/Backend/blob/master/LICENSE'
servers:
  - url: 'http://localhost:3000'
    description: Development Server
paths:
  /v1/user/auth:
    parameters: []
    post:
      summary: Authenticate
      operationId: post-v1-user-auth
      responses:
        '200':
          description: OK - Authorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-success:
                  value:
                    success: true
                    data:
                      auth-token: ...
        '400':
          description: Bad Request - Missing parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-400:
                  value:
                    success: false
                    error:
                      code: missing-parameters
        '403':
          description: Forbidden - Wrong credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '406':
          description: Not Acceptable - The caller has made too many attempts. IP locked for 5 minutes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '417':
          description: 'Expectation Failed - The user doesn''t have a password defined. Please, assign one.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '500':
          description: Internal Server Error - Unhandled error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '550':
          description: Login Attempt Register Failed - There was an internal exception while trying to register the login attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-550:
                  value:
                    success: false
                    error:
                      code: internal
      description: |-
        Requests an access token to the server.
        If returned `200`, `data` contains:
        * `auth-token`: The token generated. Is valid for 30 days, this time gets extended every time it's used. May be disposed manually.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nif:
                  type: string
                  description: The NIF of the user being authorised.
                password:
                  type: string
                  description: The password of the user being authenticated.
              required:
                - nif
                - password
        description: The parameters to use for the request.
  /v1/user/change_password:
    post:
      summary: Password Change
      operationId: post-v1-user-change_password
      responses:
        '200':
          description: OK - Password changed successfuly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-success:
                  value:
                    success: true
        '400':
          description: 'Bad Request - `password` is not present in body, or the `API Key` header should be present but it isn''t.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-400:
                  value:
                    success: false
                    error:
                      code: missing-parameters
        '404':
          description: Not Found - Could not find the given user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-404:
                  value:
                    success: true
                    error:
                      code: missing-parameters
        '406':
          description: Not Acceptable - The given API Key is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-406:
                  value:
                    success: false
                    error:
                      code: invalid-key
      description: |-
        Used for changing the password of a user. If the user doesn't have a password, this method also serves for setting one for the first time.
        "API key" is obviously only required if the user already has a password, this key will be used for checking if the user is authorised, or if it's updating its account.
      security:
        - API-Key: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: The new password to give to the user.
                nif:
                  type: string
                  description: If the user doesn't have a password. This field can be provided instead of the "API Key" header for setting a new password to the user.
              required:
                - password
        description: The new password to set.
  /v1/user/data:
    get:
      summary: Get User Data
      tags: []
      responses:
        '200':
          description: OK - Returns the data of the user. See example for schema (fields ending with `*` can be null).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example:
                  value:
                    success: true
                    data:
                      name: First Name
                      familyName: Family Name
                      address: 'C/ Murillo, 27. Alcoi*'
                      postalCode: '03802'
                      dni: 12345678A
                      born: 29/11/1998
                      workPhone: 9876544321*
                      homePhone: 9876544321*
                      mobilePhone: 9876544321*
                      email: example@mail.com
                      wheel:
                        whites:
                          number: 23*
                          locked: true*
                        blacks:
                          number: 87*
                          locked: true*
        '401':
          description: Bad Request - The given token doesn't contain valid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-400:
                  value:
                    success: false
                    error:
                      code: invalid-key
        '406':
          description: Not Acceptable - The given API Key is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-406:
                  value:
                    success: false
                    error:
                      code: invalid-key
      operationId: get-v1-user-data
      description: Fetches the currently logged in user's data.
      security:
        - API-Key: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: The id of the user to check for. Can be null if the currently logged in user is the desired one.
  /v1/events/create:
    post:
      summary: Create Event
      operationId: post-v1-events-create
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request - Missing required parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-400:
                  value:
                    success: true
                    error:
                      code: missing-parameters
        '401':
          description: Unauthorized - The logged in user doesn't have permission to create events.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-401:
                  value:
                    success: true
                    error:
                      code: unauthorised
        '406':
          description: Not Acceptable - Key not valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-406:
                  value:
                    success: true
                    error:
                      code: invalid-key
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      description: Creates a new event with the given parameters.
      security:
        - API-Key: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                  description: The name that represents the event.
                description:
                  type: string
                  description: 'A description for the event. Supports Markdown, and can be null.'
                date:
                  type: string
                  description: The date in which the event will take place.
                contact:
                  type: string
                  description: Contact information for the responsible of the event.
                category:
                  type: string
                  description: The cateogry of the event.
                  enum:
                    - generic
                    - assaig
                    - entradeta
              required:
                - displayName
                - date
                - category
        description: The parameters to use for creating the event.
  /v1/events/list:
    get:
      summary: List Events
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example:
                  value:
                    success: true
                    data: {}
        '400':
          description: Bad Request - The given token doesn't contain valid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-400:
                  value:
                    success: false
                    error:
                      code: invalid-key
        '406':
          description: Not Acceptable - The given API Key is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-406:
                  value:
                    success: false
                    error:
                      code: invalid-key
      operationId: get-v1-events-list
      description: Get a list of all the available events.
      security:
        - API-Key: []
  '/v1/events/{event_id}/join':
    post:
      summary: Join Event
      operationId: post-v1-events-join
      responses:
        '200':
          description: 'OK - Joined event, table, or created a new one successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example:
                  value:
                    success: true
        '400':
          description: Bad Request - The given token doesn't contain valid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-400:
                  value:
                    success: false
                    error:
                      code: missing-parameters
        '404':
          description: Not Found - Event id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-404:
                  value:
                    success: true
                    error:
                      code: not-found
        '406':
          description: Not Acceptable - The given API Key is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-406:
                  value:
                    success: false
                    error:
                      code: invalid-key
        '409':
          description: 'Conflict - The logged in user already is part of a table, either as a responsible, or as a member.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-409:
                  value:
                    success: true
                    error:
                      code: conflict
        '410':
          description: Gone - The given table doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-410:
                  value:
                    success: true
                    error:
                      code: not-found
        '503':
          description: Service Unavailable - The logged in user doesn't exist in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-503:
                  value:
                    success: true
                    error:
                      code: not-found
      description: 'If the event is for eating, creates a new table, and sets the current user as the responsible. If not for eating, simply confirms assistance for the given user.'
      security:
        - API-Key: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                table_id:
                  type: integer
                  description: 'The id of the table to join. If not given, a new table will be created.'
                assists:
                  type: boolean
                  default: true
                  description: 'If given, and event is not an eat event, indicates if the user will assist the event or not.'
        description: 'A table id can be given if the user is intending to join a table, rather than creating a new one.'
    parameters:
      - schema:
          type: string
        name: event_id
        in: path
        required: true
        description: The id of the event.
  '/v1/events/{event_id}/set_menu':
    parameters:
      - schema:
          type: integer
        name: event_id
        in: path
        required: true
        description: The id of the event.
    post:
      summary: Set the event's menu
      operationId: post-v1-events-event_id-set_menu
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example:
                  value:
                    success: true
        '400':
          description: Bad Request - Missing body arguments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-400:
                  value:
                    success: true
                    error:
                      code: missing-parameters
        '404':
          description: Not Found - The event was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-404:
                  value:
                    success: true
                    error:
                      code: not-found
        '405':
          description: Method Not Allowed - The event is not an eat event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-405:
                  value:
                    success: true
                    error:
                      code: not-allowed
        '406':
          description: Not Acceptable - The event id is not a valid id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                example-406:
                  value:
                    success: true
                    error:
                      code: invalid-request
      security:
        - API-Key: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Menu'
components:
  schemas:
    Error:
      title: Error
      x-stoplight:
        id: 47cl8j75t0guo
      type: object
      description: |-
        Returned when an error happenned. Error codes:
        * `missing-parameters`: The requests has some required parameters, and you haven't specified one or more of them.
        * `wrong-credentials`: The credentials you have specified are wrong.
        * `invalid-key`: The given API Key is not valid, it has expired, or it has been disposed.
        * `passwordless`: Thrown when the user doesn't have a password assigned.
      properties:
        code:
          type: string
          description: The error code that identifies the error.
          enum:
            - missing-parameters
            - wrong-credentials
            - invalid-key
      required:
        - code
    Response:
      title: Response
      x-stoplight:
        id: m065vm4jaxqgn
      type: object
      description: Returned on every operation. May include error if `success` is `false`. May or may not include `data` (Only for actions that apply).
      properties:
        success:
          type: boolean
          description: Whether the operation was successful.
          readOnly: true
        error:
          $ref: '#/components/schemas/Error'
        data:
          type: object
          description: May contain data. See the corresponding endpoint.
      required:
        - success
    Menu:
      title: Menu
      x-stoplight:
        id: ctwey9s796xq0
      type: object
      description: The contents of an event's menu.
      properties:
        firsts:
          type: array
          description: A list of plates for firsts.
          items:
            type: string
        seconds:
          type: array
          description: A list of plates for seconds.
          items:
            type: string
        thirds:
          type: array
          description: A list of plates for thirds-
          items:
            type: string
        desserts:
          type: array
          description: A list of plates for desserts.
          items:
            type: string
        drink_included:
          type: boolean
          description: If drinks are included.
        coffee_included:
          type: boolean
          description: If coffee is included.
        tea_included:
          type: boolean
          description: If tea and infusions are included.
        pricing:
          type: array
          description: Relates different grades to different prices.
          items:
            type: object
            properties:
              grade:
                type: string
                description: 'The grade to assign the price to. If null or not set, will be used as default.'
                enum:
                  - fester
                  - jubilat
                  - situ_esp
                  - colaborador
                  - juvenil
                  - infantil
                  - alevi
                  - baixa
                example: fester
              price:
                type: number
                description: The price in euros to assign. 0 indicates that it is included.
            required:
              - price
      required:
        - drink_included
        - coffee_included
        - tea_included
        - pricing
  securitySchemes:
    API-Key:
      name: API Key
      type: apiKey
      in: header
